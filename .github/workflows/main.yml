# 파일 경로: .github/workflows/main.yml

name: Deploy Full Stack Application to AWS EC2

on:
  push:
    # main 브랜치에 푸시될 때 실행됩니다. (기존 master에서 main으로 변경)
    branches: [ "master" ]

jobs:
  # ===============================================
  # === 1. 백엔드 배포 작업 (기존과 거의 동일) ===
  # ===============================================
  build-and-deploy-backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./projectNameBack
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew
    - name: Build with Gradle
      run: ./gradlew build -x test
    - name: Deploy Jar to EC2
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        source: "./projectNameBack/build/libs/*.jar"
        target: "/home/ubuntu/app/backend"
        strip_components: 3
    - name: Run Spring Boot Application
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          sudo systemctl restart myapp

  # ===============================================
  # === 2. 프론트엔드 배포 작업 (새로 추가)     ===
  # ===============================================
  build-and-deploy-frontend:
  runs-on: ubuntu-latest
  needs: build-and-deploy-backend
  defaults:
    run:
      working-directory: ./projectNameFront
  steps:
  - uses: actions/checkout@v3
  - name: Set up Node.js
    uses: actions/setup-node@v3
    with:
      node-version: '18'
  - name: Install Dependencies
    run: npm install
  - name: Build React App
    run: npm run build

  # 1. 파일을 복사하기 전에 EC2에 접속하여 Nginx를 중지하고 기존 폴더를 삭제합니다.
  - name: Stop Nginx and Clear Directory
    uses: appleboy/ssh-action@master
    with:
      host: ${{ secrets.EC2_HOST }}
      username: ${{ secrets.EC2_USERNAME }}
      key: ${{ secrets.EC2_SSH_KEY }}
      script: |
        sudo systemctl stop nginx
        sudo rm -rf /var/www/html/*

  # 2. 빌드된 프론트엔드 파일을 EC2 서버로 전송합니다.
  - name: Deploy Frontend to EC2
    uses: appleboy/scp-action@master
    with:
      host: ${{ secrets.EC2_HOST }}
      username: ${{ secrets.EC2_USERNAME }}
      key: ${{ secrets.EC2_SSH_KEY }}
      source: "./projectNameFront/build/*" # build 폴더 안의 모든 파일을 전송
      target: "/var/www/html"

  # 3. 파일 복사가 끝나면 EC2에 접속하여 Nginx를 다시 시작합니다.
  - name: Start Nginx
    uses: appleboy/ssh-action@master
    with:
      host: ${{ secrets.EC2_HOST }}
      username: ${{ secrets.EC2_USERNAME }}
      key: ${{ secrets.EC2_SSH_KEY }}
      script: |
        sudo systemctl start nginx