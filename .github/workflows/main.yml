name: Deploy Full Stack to EC2 with Docker Hub

on:
  push:
    # master 브랜치에 푸시될 때 실행
    branches: [ "master" ]

jobs:
  # ================================================================
  # === 1. 빌드 및 Docker Hub 푸시 작업 (GitHub Actions Runner) ===
  # ================================================================
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Docker Hub 로그인
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_ID }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # 백엔드 Docker 이미지 빌드 및 푸시
      - name: Build and push Backend Docker image
        run: |
          cd ./projectNameBack
          docker build -t ${{ secrets.DOCKERHUB_ID }}/scopsreservpj-backend:latest .
          docker push ${{ secrets.DOCKERHUB_ID }}/scopsreservpj-backend:latest

      - name: Build and push Frontend Docker image
        run: |
          cd ./projectNameFront
          docker build -t ${{ secrets.DOCKERHUB_ID }}/scopsreservpj-frontend:latest .
          docker push ${{ secrets.DOCKERHUB_ID }}/scopsreservpj-frontend:latest

  # ========================================================
  # === 2. EC2 배포 작업 (EC2 서버에서 실행)              ===
  # ========================================================
  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push # build-and-push 작업이 성공해야 실행
    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # 배포 폴더로 이동
            cd /home/${{ secrets.EC2_USERNAME }}/app

            # .env 파일 생성 (DB 접속 정보)
            echo "DB_HOST=${{ secrets.DB_HOST }}" > .env
            echo "DB_NAME=scopsdb" >> .env
            echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
            
            # Docker Hub ID를 .env 파일에 추가 (docker-compose.yml에서 사용하기 위함)
            echo "DOCKERHUB_ID=${{ secrets.DOCKERHUB_ID }}" >> .env
            
            # Docker Hub에서 최신 이미지 받아오기
            docker-compose pull
            
            # 컨테이너 재시작
            docker-compose up -d
            
            # 사용하지 않는 이전 Docker 이미지 정리
            docker image prune -f