name: Deploy with Docker to EC2

on:
  push:
    branches: [ "master" ] # 또는 main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # 1. rsync를 사용하여 EC2에 프로젝트 파일 동기화
      - name: Sync project files to EC2 via rsync
        uses: appleboy/rsync-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "./" 
          target: "/home/${{ secrets.EC2_USERNAME }}/app"
          flags: "-avz --delete"

      # 2. EC2에서 Docker Compose로 배포 실행
      - name: Deploy on EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/${{ secrets.EC2_USERNAME }}/app
            
            # Docker Compose가 사용할 .env 파일 생성
            echo "DB_HOST=${{ secrets.DB_HOST }}" > .env
            echo "DB_NAME=scopsdb" >> .env
            echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env

            # Docker Compose 실행 (sudo 없이)
            docker-compose down
            docker-compose build --no-cache
            docker-compose up -d