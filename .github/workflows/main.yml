name: CI/CD Pipeline to AWS EC2

on:
  push:
    branches: [ "master" ] # master 브랜치에 푸시될 때 실행

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest # 이 워크플로우는 우분투 환경에서 실행됨

    steps:
      - name: Checkout Code # 1. 코드 체크아웃
        uses: actions/checkout@v3

      - name: Set up Node.js # 2. Node.js 환경 설정
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Dependencies # 3. 의존성 설치
        run: npm install

      - name: Build Application # 4. 애플리케이션 빌드 (필요한 경우)
        run: npm run build --if-present

      - name: Create .env file on server # 5. 서버에 환경변수 파일 생성
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env
            echo "DB_USER=${{ secrets.DB_USERNAME }}" >> .env
            echo "DB_PASS=${{ secrets.DB_PASSWORD }}" >> .env
            # 필요한 다른 환경변수 추가

      - name: Deploy to EC2 # 6. 빌드 결과물을 EC2 서버로 전송
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "." # 현재 디렉토리의 모든 파일을 전송
          target: "/home/ubuntu/app" # EC2 서버의 배포 디렉토리

      - name: Run Application on EC2 # 7. EC2에서 애플리케이션 실행
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/ubuntu/app
            npm install --production
            # pm2를 사용하여 애플리케이션을 중단 없이 실행/재시작
            pm2 reload app.js || pm2 start app.js --name "my-app"
