# 파일 경로: .github/workflows/main.yml

name: Deploy Full Stack Application to AWS EC2

on:
  push:
    # main 브랜치에 푸시될 때 실행됩니다. (기존 master에서 main으로 변경)
    branches: [ "main" ]

jobs:
  # ===============================================
  # === 1. 백엔드 배포 작업 (기존과 거의 동일) ===
  # ===============================================
  build-and-deploy-backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./projectNameBack
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew
    - name: Build with Gradle
      run: ./gradlew build -x test
    - name: Deploy Jar to EC2
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        source: "./projectNameBack/build/libs/*.jar"
        target: "/home/ubuntu/app/backend"
        strip_components: 3
    - name: Run Spring Boot Application
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          sudo systemctl restart myapp

  # ===============================================
  # === 2. 프론트엔드 배포 작업 (새로 추가)     ===
  # ===============================================
  build-and-deploy-frontend:
    runs-on: ubuntu-latest
    # 백엔드 작업이 성공적으로 끝나야만 프론트엔드 배포가 시작됩니다.
    needs: build-and-deploy-backend
    defaults:
      run:
        working-directory: ./projectNameFront
    steps:
    - uses: actions/checkout@v3
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    - name: Install Dependencies
      run: npm install
    - name: Build React App
      run: npm run build
    - name: Deploy Frontend to EC2
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        # React 빌드 결과물(build 폴더)을 Nginx의 웹 루트 디렉토리로 전송합니다.
        source: "./projectNameFront/build/"
        target: "/var/www/html"
        rm: true # 배포 전에 기존 파일들을 모두 삭제하여 깔끔하게 유지합니다.