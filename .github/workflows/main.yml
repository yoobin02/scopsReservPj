# 파일 경로: .github/workflows/main.yml

name: Deploy Spring Boot Backend to AWS EC2

on:
  push:
    branches: [ "master" ]
    paths:
      - 'projectNameBack/**' # 백엔드 폴더에 변경이 있을 때만 실행

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    # 이 job의 모든 run 명령어는 projectNameBack 폴더에서 실행됩니다.
    defaults:
      run:
        working-directory: ./projectNameBack

    steps:
    # 1. GitHub 저장소의 코드를 가져옵니다
    - name: Checkout Code
      uses: actions/checkout@v3

    # 2. JDK 17 버전을 설치합니다 (프로젝트에 맞는 버전으로 변경)
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    # 3. gradlew 파일에 실행 권한을 부여합니다
    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew

    # 4. Gradle로 스프링부트 프로젝트를 빌드합니다 (jar 파일 생성)
    - name: Build with Gradle
      run: ./gradlew build -x test

    # 5. 빌드된 .jar 파일을 EC2 서버로 전송합니다
    - name: Deploy to EC2
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        # 빌드 결과물인 jar 파일을 전송합니다
        source: "./projectNameBack/build/libs/*.jar"
        target: "/home/ubuntu/app/backend"
        strip_components: 3 # source 경로에서 폴더 3개를 제거하여 파일명만 남깁니다

    # 6. EC2 서버에 접속해서 애플리케이션을 실행합니다
    - name: Run Spring Boot Application on EC2
      uses: appleboy/ssh-action@master
      with:
      host: ${{ secrets.EC2_HOST }}
      username: ${{ secrets.EC2_USERNAME }}
      key: ${{ secrets.EC2_SSH_KEY }}
      script: |
        # systemd를 통해 myapp 서비스를 재시작합니다.
        sudo systemctl restart myapp

        # 서비스가 정상적으로 실행되었는지 10초 후 상태를 확인합니다.
        sleep 10
        sudo systemctl status myapp